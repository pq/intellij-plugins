/* The following code was generated by JFlex 1.4.3 on 5/1/14 3:38 PM */

package com.jetbrains.lang.dart.lexer;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.jetbrains.lang.dart.DartTokenTypes.*;
import static com.jetbrains.lang.dart.DartTokenTypesSets.*;
import static com.jetbrains.lang.dart.lexer.DartLexer.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/1/14 3:38 PM from the specification file
 * <tt>/Users/pquitslund/src/git/forks/intellij-plugins/Dart/src/com/jetbrains/lang/dart/lexer/Dart.flex</tt>
 */
class _DartLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int THREE_QUO_STRING = 6;
  public static final int THREE_APOS_STRING = 10;
  public static final int APOS_STRING = 8;
  public static final int YYINITIAL = 0;
  public static final int LONG_TEMPLATE_ENTRY = 14;
  public static final int QUO_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 12;
  public static final int MULTI_LINE_COMMENT_STATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\10\1\0\1\5\23\0\1\5\1\7\1\14\1\6"+
    "\1\16\1\63\1\73\1\15\1\55\1\56\1\12\1\23\1\65\1\60"+
    "\1\20\1\11\1\24\11\1\1\66\1\57\1\67\1\61\1\64\1\70"+
    "\1\74\4\2\1\21\1\2\21\3\1\26\2\3\1\53\1\75\1\54"+
    "\1\72\1\3\1\0\1\30\1\33\1\35\1\44\1\22\1\4\1\51"+
    "\1\36\1\42\1\3\1\34\1\37\1\52\1\41\1\40\1\47\1\3"+
    "\1\13\1\31\1\32\1\43\1\50\1\46\1\25\1\45\1\3\1\17"+
    "\1\71\1\27\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\4\1\2\0\1\2\1\3\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\4\1\12\1\13\1\14\1\15"+
    "\1\4\1\16\1\3\1\17\17\4\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\3\42"+
    "\1\1\1\43\1\44\1\45\1\2\1\1\2\2\1\1"+
    "\1\2\1\1\1\2\2\46\1\6\1\47\1\50\1\0"+
    "\1\3\3\4\1\51\1\52\1\51\1\53\1\54\1\55"+
    "\2\56\1\4\2\0\1\3\2\4\1\57\1\60\1\3"+
    "\1\61\17\4\1\62\1\63\4\4\1\64\1\65\1\66"+
    "\2\4\1\67\6\4\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\0\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\0\1\110\1\111\1\112"+
    "\1\0\1\1\2\0\1\46\1\3\2\4\1\113\1\4"+
    "\1\114\1\115\4\56\1\4\1\116\1\117\5\4\1\120"+
    "\5\4\1\121\13\4\1\122\7\4\1\123\1\4\1\124"+
    "\1\125\1\126\1\127\1\46\3\4\1\130\1\0\1\56"+
    "\2\131\4\4\1\132\3\4\1\133\2\4\1\134\1\4"+
    "\1\135\2\4\1\136\4\4\1\137\3\4\1\140\5\4"+
    "\1\141\1\142\1\143\1\144\1\4\1\145\1\146\2\0"+
    "\10\4\1\147\1\4\1\150\1\4\1\151\1\152\1\153"+
    "\1\154\10\4\1\155\2\4\2\0\1\4\1\156\2\4"+
    "\1\157\1\160\1\4\1\161\1\162\4\4\1\163\1\4"+
    "\1\164\2\4\1\165\1\166\1\131\1\167\1\4\1\170"+
    "\1\4\1\171\1\4\1\172\3\4\1\173\1\174\1\175"+
    "\1\176\1\177\1\4\1\200\1\4\1\201";

  private static int [] zzUnpackAction() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u01f0\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u01f0\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6"+
    "\0\u0934\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u0972\0\u09b0"+
    "\0\u09ee\0\u0a2c\0\u0a6a\0\u01f0\0\u01f0\0\u0aa8\0\u01f0\0\u0ae6"+
    "\0\u0b24\0\u0b62\0\u01f0\0\u01f0\0\u0ba0\0\u0bde\0\u0c1c\0\u01f0"+
    "\0\u01f0\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u01f0\0\u01f0\0\u01f0\0\u04d8"+
    "\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u01f0\0\u103a\0\u1078"+
    "\0\u01f0\0\u01f0\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\u01f0\0\u01f0\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u026c\0\u026c\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u026c\0\u026c\0\u026c\0\u17bc\0\u17fa"+
    "\0\u026c\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u01f0"+
    "\0\u01f0\0\u01f0\0\u01f0\0\u19ac\0\u01f0\0\u01f0\0\u19ea\0\u01f0"+
    "\0\u1a28\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u0c98\0\u1a66\0\u01f0\0\u01f0\0\u1aa4\0\u01f0\0\u0dce\0\u1ae2"+
    "\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u026c\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u01f0\0\u01f0\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u026c\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u1ff8\0\u2036\0\u026c\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c"+
    "\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u026c\0\u231e"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u026c\0\u24d0"+
    "\0\u026c\0\u01f0\0\u01f0\0\u01f0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u01f0\0\u1c94\0\u01f0\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe"+
    "\0\u273c\0\u026c\0\u277a\0\u27b8\0\u27f6\0\u026c\0\u2834\0\u2872"+
    "\0\u026c\0\u28b0\0\u026c\0\u28ee\0\u292c\0\u026c\0\u296a\0\u29a8"+
    "\0\u29e6\0\u2a24\0\u026c\0\u2a62\0\u2aa0\0\u2ade\0\u026c\0\u2b1c"+
    "\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u026c\0\u026c\0\u026c\0\u0e88"+
    "\0\u2c52\0\u026c\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u026c\0\u2f3a\0\u026c"+
    "\0\u2f78\0\u026c\0\u026c\0\u026c\0\u026c\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u026c\0\u31a6\0\u31e4"+
    "\0\u3222\0\u3260\0\u329e\0\u026c\0\u32dc\0\u331a\0\u026c\0\u026c"+
    "\0\u3358\0\u026c\0\u026c\0\u3396\0\u33d4\0\u3412\0\u3450\0\u026c"+
    "\0\u348e\0\u026c\0\u34cc\0\u350a\0\u026c\0\u026c\0\u01f0\0\u026c"+
    "\0\u3548\0\u026c\0\u3586\0\u026c\0\u35c4\0\u026c\0\u3602\0\u3640"+
    "\0\u367e\0\u026c\0\u026c\0\u026c\0\u026c\0\u026c\0\u36bc\0\u026c"+
    "\0\u36fa\0\u026c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\2\13\1\14\1\15\1\16\1\17\1\15"+
    "\1\20\1\21\1\22\1\23\1\24\1\13\1\25\1\26"+
    "\1\13\1\27\1\30\1\31\2\13\1\32\1\33\1\34"+
    "\1\35\1\36\1\13\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\13\1\45\1\13\1\46\1\47\1\50\1\51"+
    "\1\13\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\11\11\74\1\75\1\76\63\74"+
    "\10\77\1\100\3\77\1\101\1\77\1\102\56\77\1\103"+
    "\14\104\1\105\1\104\1\102\56\104\1\106\10\107\1\100"+
    "\4\107\1\101\1\102\56\107\1\110\15\111\1\112\1\102"+
    "\56\111\1\106\2\11\3\113\6\11\1\113\5\11\2\113"+
    "\2\11\2\113\1\11\2\113\1\114\20\113\24\11\1\12"+
    "\2\13\1\14\1\15\1\115\1\17\1\15\1\20\1\21"+
    "\1\22\1\23\1\24\1\13\1\116\1\26\1\13\1\27"+
    "\1\30\1\31\2\13\1\117\1\33\1\34\1\35\1\36"+
    "\1\13\1\37\1\40\1\41\1\42\1\43\1\44\1\13"+
    "\1\45\1\13\1\46\1\47\1\50\1\51\1\13\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\11\77\0\1\12\16\0\1\120\2\121\1\0"+
    "\1\12\52\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\1\122\7\13\1\123\1\13\1\124\10\13\30\0\1\15"+
    "\2\0\1\15\74\0\1\125\147\0\1\126\25\0\1\127"+
    "\1\130\46\0\1\131\75\0\1\132\15\0\4\13\6\0"+
    "\1\13\1\133\1\134\1\13\2\0\1\13\1\135\1\0"+
    "\3\13\1\0\23\13\37\0\1\136\76\0\1\137\61\0"+
    "\1\140\22\0\1\140\52\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\141\1\13\1\0"+
    "\7\13\1\142\13\13\46\0\1\143\35\0\1\144\15\0"+
    "\1\12\16\0\1\120\2\121\1\0\1\12\2\145\50\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\1\13\1\146\1\13\1\147\17\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\1\13\1\150"+
    "\1\0\3\13\1\0\2\13\1\151\3\13\1\152\4\13"+
    "\1\153\2\13\1\154\4\13\24\0\4\13\6\0\1\155"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\6\13"+
    "\1\156\6\13\1\157\5\13\24\0\4\13\6\0\1\160"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\23\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\1\161\6\13\1\162\1\163\12\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\12\13\1\164\10\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\12\13\1\165\10\13\24\0\3\13\1\166\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\11\13\1\167\5\13\1\170\3\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\1\13\1\171\1\0\3\13"+
    "\1\0\1\172\12\13\1\173\7\13\24\0\3\13\1\174"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\1\13\1\175\7\13\1\176\10\13\1\177\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\1\13\1\200"+
    "\1\0\3\13\1\0\10\13\1\201\12\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\6\13\1\202\3\13\1\203\10\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\1\204\22\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\205\7\13"+
    "\1\206\12\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\1\13\1\207\1\0\3\13\1\0\23\13\103\0"+
    "\1\210\1\211\75\0\1\212\2\0\1\213\22\0\1\214"+
    "\145\0\1\215\75\0\1\216\2\0\1\217\72\0\1\220"+
    "\5\0\1\221\67\0\1\222\7\0\1\223\65\0\1\224"+
    "\75\0\1\225\11\0\1\226\14\0\1\227\74\0\1\230"+
    "\64\0\10\77\1\0\3\77\1\0\1\77\1\0\56\77"+
    "\1\231\2\0\3\232\6\0\1\232\3\0\1\233\1\0"+
    "\2\232\2\0\2\232\1\0\23\232\23\0\10\77\1\0"+
    "\65\77\14\104\1\0\1\104\1\0\56\104\1\0\14\234"+
    "\1\235\61\234\76\236\10\107\1\0\4\107\2\0\56\107"+
    "\1\237\10\107\1\0\65\107\15\111\2\0\56\111\1\0"+
    "\15\234\1\240\60\234\1\0\4\113\6\0\1\113\5\0"+
    "\2\113\1\0\3\113\1\0\23\113\24\0\4\113\6\0"+
    "\1\113\5\0\2\113\1\0\3\113\1\0\6\113\1\241"+
    "\14\113\24\0\1\242\21\0\2\242\33\0\1\242\16\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\5\13\1\243\1\13\1\244\13\13\24\0"+
    "\4\13\6\0\1\245\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\11\13\1\246"+
    "\11\13\23\0\10\125\1\0\75\125\1\0\1\247\64\125"+
    "\12\0\1\250\63\0\10\251\1\0\3\251\1\252\61\251"+
    "\10\253\1\0\4\253\1\254\60\253\1\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\2\13\1\255\20\13\37\0\1\256\76\0\1\257\61\0"+
    "\1\140\17\0\2\121\1\0\1\140\52\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\2\13\1\260\14\13\1\261\3\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\1\13\1\262\21\13\24\0\2\145\1\0\1\145\14\0"+
    "\2\145\1\0\1\145\3\0\1\145\2\0\1\145\1\0"+
    "\1\145\6\0\1\145\32\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\13\1\263"+
    "\21\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\1\13\1\264\21\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\2\13\1\265\20\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\1\266\22\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\10\13\1\267\12\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\17\13\1\270\3\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\12\13\1\271\10\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\13\13"+
    "\1\272\1\13\1\273\5\13\24\0\4\13\6\0\1\274"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\12\13"+
    "\1\275\10\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\17\13\1\276\3\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\1\13"+
    "\1\277\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\1\13\1\300\1\301\20\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\1\302"+
    "\22\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\11\13\1\303\11\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\14\13\1\304\6\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\3\13\1\305\17\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\1\13\1\306\1\0\3\13\1\0\23\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\16\13\1\307\4\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\2\13\1\310\20\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\7\13"+
    "\1\311\13\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\17\13\1\312\3\13"+
    "\24\0\3\13\1\313\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\12\13\1\314\10\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\2\13\1\315"+
    "\20\13\24\0\4\13\6\0\1\316\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\317\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\23\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\12\13\1\320\10\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\2\13\1\321\20\13\104\0\1\322\75\0"+
    "\1\323\75\0\1\324\15\0\4\232\6\0\1\232\5\0"+
    "\2\232\1\0\3\232\1\0\23\232\23\0\14\234\1\101"+
    "\76\234\1\101\60\234\1\0\4\113\6\0\1\113\5\0"+
    "\2\113\1\0\3\113\1\0\12\113\1\325\10\113\24\0"+
    "\1\242\22\0\1\242\52\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\2\13\1\326"+
    "\20\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\1\13\1\327\21\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\1\330\22\13\23\0\10\247\1\0\65\247"+
    "\11\0\1\331\1\332\63\0\10\251\1\0\3\251\1\333"+
    "\61\251\14\0\1\334\61\0\10\253\1\0\4\253\1\333"+
    "\60\253\15\0\1\335\61\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\6\13\1\336"+
    "\4\13\1\337\7\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\1\13\1\340\1\0\3\13\1\0\23\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\10\13\1\341\12\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\1\13\1\342\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\1\13\1\343\1\0\3\13\1\0\23\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\2\13\1\344\20\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\2\13\1\345\20\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\16\13"+
    "\1\346\4\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\1\13\1\347\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\2\13\1\350\20\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\1\13\1\351\1\0\3\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\10\13\1\352\12\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\1\13\1\353\21\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\1\13\1\354\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\355\22\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\1\13"+
    "\1\356\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\5\13\1\357\15\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\13\1\360"+
    "\21\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\1\13\1\361\1\362\20\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\1\13"+
    "\1\363\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\364\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\23\13\24\0\4\13\6\0\1\365\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\12\13\1\366\10\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\7\13\1\367"+
    "\13\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\7\13\1\370\1\371\12\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\1\13"+
    "\1\372\1\0\3\13\1\0\1\373\22\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\7\13\1\374\13\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\6\13"+
    "\1\375\14\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\2\13\1\376\20\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\14\13\1\377\6\13\24\0\4\113"+
    "\6\0\1\113\5\0\2\113\1\0\3\113\1\0\1\113"+
    "\1\u0100\21\113\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\10\13\1\u0101\12\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\1\13"+
    "\1\u0102\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\7\13\1\u0103\13\13\23\0\14\334\1\u0104\61\334\15\335"+
    "\1\u0105\60\335\1\0\4\13\6\0\1\u0106\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\23\13\24\0\4\13"+
    "\6\0\1\u0107\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\u0108\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\11\13\1\u0109\11\13"+
    "\24\0\4\13\6\0\1\u010a\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\23\13\24\0\4\13\6\0\1\u010b"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\23\13"+
    "\24\0\4\13\6\0\1\u010c\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\23\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\12\13"+
    "\1\u010d\10\13\24\0\4\13\6\0\1\u010e\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\23\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\5\13\1\u010f\15\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\16\13"+
    "\1\u0110\4\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\14\13\1\u0111\6\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\4\13\1\u0112\16\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\6\13\1\u0113\14\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\1\13"+
    "\1\u0114\21\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\2\13\1\u0115\20\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\12\13\1\u0116\10\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\1\u0117\22\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\u0118\22\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\20\13\1\u0119\2\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\1\13\1\u011a\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\u011b\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\23\13\24\0"+
    "\4\13\6\0\1\u011c\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\13\13\1\u011d"+
    "\7\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\1\13\1\u011e\1\0\3\13\1\0\23\13\24\0\4\13"+
    "\6\0\1\u011f\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\7\13\1\u0120\13\13"+
    "\23\0\14\334\1\u0121\61\334\15\335\1\u0122\60\335\1\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\10\13\1\u0123\12\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\11\13\1\u0124\11\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\11\13\1\u0125"+
    "\11\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\14\13\1\u0126\6\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\2\13\1\u0127\20\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\2\13\1\u0128\20\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\u0129\22\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\5\13\1\u012a\15\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\6\13\1\u012b\14\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\1\13\1\u012c\1\0\3\13\1\0"+
    "\23\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\11\13\1\u012d\11\13\24\0"+
    "\4\13\6\0\1\u012e\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\23\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\2\13\1\u012f"+
    "\20\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\1\13\1\u0130\1\0\3\13\1\0\23\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\22\13\1\u0131\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\2\13\1\u0132"+
    "\20\13\24\0\4\13\6\0\1\u0133\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\7\13\1\u0134\13\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\15\13\1\u0135"+
    "\5\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\15\13\1\u0136\5\13\23\0"+
    "\14\334\1\u0137\61\334\15\335\1\u0137\60\335\1\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\16\13\1\u0138\4\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\1\u0139"+
    "\22\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\1\13\1\u013a\21\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\5\13\1\u013b\15\13\24\0\3\13\1\u013c"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\23\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\13\13\1\u013d\7\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\2\13"+
    "\1\0\3\13\1\0\15\13\1\u013e\5\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\10\13\1\u013f\12\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\1\13\1\u0140\1\0\3\13\1\0"+
    "\23\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\1\13\1\u0141\1\0\3\13\1\0\23\13\24\0\4\13"+
    "\6\0\1\13\2\0\1\13\2\0\2\13\1\0\3\13"+
    "\1\0\2\13\1\u0142\20\13\24\0\4\13\6\0\1\13"+
    "\2\0\1\13\2\0\2\13\1\0\3\13\1\0\7\13"+
    "\1\u0143\13\13\24\0\4\13\6\0\1\13\2\0\1\13"+
    "\2\0\2\13\1\0\3\13\1\0\2\13\1\u0144\20\13"+
    "\24\0\4\13\6\0\1\13\2\0\1\13\2\0\1\13"+
    "\1\u0145\1\0\3\13\1\0\23\13\24\0\4\13\6\0"+
    "\1\u0146\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\23\13\24\0\4\13\6\0\1\13\2\0\1\13\2\0"+
    "\2\13\1\0\3\13\1\0\11\13\1\u0147\11\13\24\0"+
    "\4\13\6\0\1\13\2\0\1\13\2\0\2\13\1\0"+
    "\3\13\1\0\14\13\1\u0148\6\13\24\0\4\13\6\0"+
    "\1\13\2\0\1\13\2\0\2\13\1\0\3\13\1\0"+
    "\2\13\1\u0149\20\13\24\0\4\13\6\0\1\13\2\0"+
    "\1\13\2\0\2\13\1\0\3\13\1\0\1\13\1\u014a"+
    "\21\13\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14136];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\1\2\0\1\11\13\1\1\11\4\1\1\11"+
    "\17\1\5\11\5\1\2\11\1\1\1\11\3\1\2\11"+
    "\3\1\2\11\13\1\3\11\1\0\5\1\1\11\2\1"+
    "\2\11\3\1\2\0\3\1\2\11\43\1\4\11\1\1"+
    "\2\11\1\0\1\11\1\1\7\11\1\0\1\1\2\11"+
    "\1\0\1\11\2\0\15\1\2\11\42\1\3\11\4\1"+
    "\1\11\1\0\1\11\50\1\2\0\33\1\2\0\24\1"+
    "\1\11\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    protected final Stack<State> myStateStack = new Stack<State>();
    protected int myLeftBraceCount;

    private void pushState(int state) {
        myStateStack.push(new State(yystate(), myLeftBraceCount));
        myLeftBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = myStateStack.pop();
        myLeftBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    public _DartLexer() {
      this((java.io.Reader)null);
    }


  _DartLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _DartLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      myLeftBraceCount = 0;
  myStateStack.clear();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return IDENTIFIER;
          }
        case 130: break;
        case 81: 
          { return TRY;
          }
        case 131: break;
        case 89: 
          { return RAW_TRIPLE_QUOTED_STRING;
          }
        case 132: break;
        case 18: 
          { return LPAREN;
          }
        case 133: break;
        case 98: 
          { return PART;
          }
        case 134: break;
        case 47: 
          { return PLUS_PLUS;
          }
        case 135: break;
        case 32: 
          { return AND;
          }
        case 136: break;
        case 109: 
          { return WHILE;
          }
        case 137: break;
        case 108: 
          { return CONST;
          }
        case 138: break;
        case 92: 
          { return TRUE;
          }
        case 139: break;
        case 59: 
          { return EXPRESSION_BODY_DEF;
          }
        case 140: break;
        case 60: 
          { return INT_DIV;
          }
        case 141: break;
        case 17: 
          { return RBRACKET;
          }
        case 142: break;
        case 113: 
          { return STATIC;
          }
        case 143: break;
        case 3: 
          { return NUMBER;
          }
        case 144: break;
        case 27: 
          { return COLON;
          }
        case 145: break;
        case 62: 
          { return GT_EQ;
          }
        case 146: break;
        case 105: 
          { return BREAK;
          }
        case 147: break;
        case 111: 
          { return EXPORT;
          }
        case 148: break;
        case 76: 
          { return SINGLE_LINE_DOC_COMMENT;
          }
        case 149: break;
        case 22: 
          { return EQ;
          }
        case 150: break;
        case 99: 
          { return VOID;
          }
        case 151: break;
        case 38: 
          { popState(); return IDENTIFIER;
          }
        case 152: break;
        case 124: 
          { return EXTERNAL;
          }
        case 153: break;
        case 121: 
          { return TYPEDEF;
          }
        case 154: break;
        case 122: 
          { return LIBRARY;
          }
        case 155: break;
        case 119: 
          { return RETHROW;
          }
        case 156: break;
        case 23: 
          { return BIN_NOT;
          }
        case 157: break;
        case 77: 
          { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_DOC_COMMENT_START;
          }
        case 158: break;
        case 80: 
          { return SET;
          }
        case 159: break;
        case 64: 
          { return LT_LT;
          }
        case 160: break;
        case 120: 
          { return EXTENDS;
          }
        case 161: break;
        case 44: 
          { return DIV_EQ;
          }
        case 162: break;
        case 110: 
          { return RETURN;
          }
        case 163: break;
        case 91: 
          { return SHOW;
          }
        case 164: break;
        case 88: 
          { return MULTI_LINE_COMMENT;
          }
        case 165: break;
        case 103: 
          { return SUPER;
          }
        case 166: break;
        case 112: 
          { return ASSERT;
          }
        case 167: break;
        case 66: 
          { return OR_OR;
          }
        case 168: break;
        case 16: 
          { return LBRACKET;
          }
        case 169: break;
        case 100: 
          { popState(); return THIS;
          }
        case 170: break;
        case 20: 
          { return SEMICOLON;
          }
        case 171: break;
        case 106: 
          { return CATCH;
          }
        case 172: break;
        case 24: 
          { return REM;
          }
        case 173: break;
        case 26: 
          { return COMMA;
          }
        case 174: break;
        case 51: 
          { return ON;
          }
        case 175: break;
        case 74: 
          { yypushback(1); return REGULAR_STRING_PART;
          }
        case 176: break;
        case 45: 
          { return MUL_EQ;
          }
        case 177: break;
        case 31: 
          { return XOR;
          }
        case 178: break;
        case 10: 
          { pushState(QUO_STRING);        return OPEN_QUOTE;
          }
        case 179: break;
        case 8: 
          { return DIV;
          }
        case 180: break;
        case 67: 
          { return XOR_EQ;
          }
        case 181: break;
        case 58: 
          { return EQ_EQ;
          }
        case 182: break;
        case 56: 
          { return MINUS_MINUS;
          }
        case 183: break;
        case 39: 
          { myLeftBraceCount++; return LBRACE;
          }
        case 184: break;
        case 14: 
          { return PLUS;
          }
        case 185: break;
        case 34: 
          { return MULTI_LINE_COMMENT_BODY;
          }
        case 186: break;
        case 115: 
          { return NATIVE;
          }
        case 187: break;
        case 2: 
          { return BAD_CHARACTER;
          }
        case 188: break;
        case 96: 
          { return NULL;
          }
        case 189: break;
        case 36: 
          { popState();                   return CLOSING_QUOTE;
          }
        case 190: break;
        case 28: 
          { return LT;
          }
        case 191: break;
        case 114: 
          { return SWITCH;
          }
        case 192: break;
        case 107: 
          { return CLASS;
          }
        case 193: break;
        case 73: 
          { pushState(LONG_TEMPLATE_ENTRY);
                                                                                             return LONG_TEMPLATE_ENTRY_START;
          }
        case 194: break;
        case 40: 
          { if (myLeftBraceCount == 0) {
                                     popState();
                                     return LONG_TEMPLATE_ENTRY_END;
                                   }
                                   myLeftBraceCount--;
                                   return RBRACE;
          }
        case 195: break;
        case 6: 
          { return HASH;
          }
        case 196: break;
        case 37: 
          { return SHORT_TEMPLATE_ENTRY_START;
          }
        case 197: break;
        case 13: 
          { return DOT;
          }
        case 198: break;
        case 123: 
          { return DEFAULT;
          }
        case 199: break;
        case 55: 
          { return DO;
          }
        case 200: break;
        case 54: 
          { return IN;
          }
        case 201: break;
        case 102: 
          { return FINAL;
          }
        case 202: break;
        case 101: 
          { return FALSE;
          }
        case 203: break;
        case 42: 
          { return NEQ;
          }
        case 204: break;
        case 128: 
          { return DEFERRED;
          }
        case 205: break;
        case 70: 
          { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_BODY;
          }
        case 206: break;
        case 15: 
          { return RBRACE;
          }
        case 207: break;
        case 69: 
          { return AND_AND;
          }
        case 208: break;
        case 82: 
          { return NEW;
          }
        case 209: break;
        case 25: 
          { return GT;
          }
        case 210: break;
        case 50: 
          { return OF;
          }
        case 211: break;
        case 95: 
          { return HIDE;
          }
        case 212: break;
        case 126: 
          { return CONTINUE;
          }
        case 213: break;
        case 71: 
          { popState();                          return yystate() == MULTI_LINE_COMMENT_STATE
                                                                                                               ? MULTI_LINE_COMMENT_BODY // inner comment closed
                                                                                                               : MULTI_LINE_COMMENT_END;
          }
        case 214: break;
        case 1: 
          { return REGULAR_STRING_PART;
          }
        case 215: break;
        case 30: 
          { return OR;
          }
        case 216: break;
        case 86: 
          { return GT_GT_EQ;
          }
        case 217: break;
        case 53: 
          { return IS;
          }
        case 218: break;
        case 12: 
          { return LBRACE;
          }
        case 219: break;
        case 83: 
          { return VAR;
          }
        case 220: break;
        case 35: 
          { popState();                   return WHITE_SPACE;
          }
        case 221: break;
        case 48: 
          { return PLUS_EQ;
          }
        case 222: break;
        case 65: 
          { return OR_EQ;
          }
        case 223: break;
        case 7: 
          { return NOT;
          }
        case 224: break;
        case 61: 
          { return REM_EQ;
          }
        case 225: break;
        case 116: 
          { return IMPORT;
          }
        case 226: break;
        case 5: 
          { return WHITE_SPACE;
          }
        case 227: break;
        case 127: 
          { return OPERATOR;
          }
        case 228: break;
        case 85: 
          { return INT_DIV_EQ;
          }
        case 229: break;
        case 57: 
          { return MINUS_EQ;
          }
        case 230: break;
        case 33: 
          { return AT;
          }
        case 231: break;
        case 104: 
          { return THROW;
          }
        case 232: break;
        case 90: 
          { return ELSE;
          }
        case 233: break;
        case 52: 
          { return IF;
          }
        case 234: break;
        case 97: 
          { return WITH;
          }
        case 235: break;
        case 11: 
          { pushState(APOS_STRING);       return OPEN_QUOTE;
          }
        case 236: break;
        case 46: 
          { return RAW_SINGLE_QUOTED_STRING;
          }
        case 237: break;
        case 72: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                                                             yypushback(yylength() - 1);
                                                                                             return SHORT_TEMPLATE_ENTRY_START;
          }
        case 238: break;
        case 9: 
          { return MUL;
          }
        case 239: break;
        case 41: 
          { return SINGLE_LINE_COMMENT;
          }
        case 240: break;
        case 118: 
          { return FINALLY;
          }
        case 241: break;
        case 129: 
          { return IMPLEMENTS;
          }
        case 242: break;
        case 79: 
          { pushState(THREE_APOS_STRING); return OPEN_QUOTE;
          }
        case 243: break;
        case 21: 
          { return MINUS;
          }
        case 244: break;
        case 125: 
          { return ABSTRACT;
          }
        case 245: break;
        case 75: 
          { return FOR;
          }
        case 246: break;
        case 94: 
          { return CASE;
          }
        case 247: break;
        case 84: 
          { return GET;
          }
        case 248: break;
        case 19: 
          { return RPAREN;
          }
        case 249: break;
        case 87: 
          { return LT_LT_EQ;
          }
        case 250: break;
        case 29: 
          { return QUEST;
          }
        case 251: break;
        case 68: 
          { return AND_EQ;
          }
        case 252: break;
        case 43: 
          { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_START;
          }
        case 253: break;
        case 93: 
          { return THIS;
          }
        case 254: break;
        case 63: 
          { return LT_EQ;
          }
        case 255: break;
        case 117: 
          { return FACTORY;
          }
        case 256: break;
        case 49: 
          { return AS;
          }
        case 257: break;
        case 78: 
          { pushState(THREE_QUO_STRING);  return OPEN_QUOTE;
          }
        case 258: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
